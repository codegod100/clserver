(in-package #:clserver)

;; Main Parenscript web server with routing
(defun generate-server ()
  ;; Set up Djula template directory
  (add-template-directory "templates")
  
  ;; Generate HTML templates with placeholders for dynamic content
  (let ((home-template (with-output-to-string (stream)
                         (render-template* "templates/home.html" stream
                                          :visitor_count "{{VISITOR_COUNT}}")))
        (user-template (with-output-to-string (stream)
                         (render-template* "templates/user.html" stream
                                          :username "{{USERNAME}}")))
        (post-template (with-output-to-string (stream)
                         (render-template* "templates/post.html" stream
                                          :post_id "{{POST_ID}}"))))
    
    (let ((js-code (eval `(ps
                   (defvar *http* (require "http"))
                   (defvar *url* (require "url"))
                   (defvar *port* 3000)
                   (defvar *visitor-count* 0)
                   
                   ;; Template strings generated by Djula
                   (defvar *home-template* ,home-template)
                   (defvar *user-template* ,user-template)
                   (defvar *post-template* ,post-template)
                   
                   (defun send-html (res html)
                     (setf (@ res status-code) 200)
                     (setf (@ res "content-type") "text/html")
                     (res.end html))
                   
                   (defun send-json (res json-string)
                     (setf (@ res status-code) 200)
                     (setf (@ res "content-type") "application/json")
                     (res.end json-string))
                   
                   (defun substitute-template (template placeholder value)
                     (funcall (@ template replace) (ps-inline "new RegExp(placeholder, 'g')") value))
                   
                   
                   (defun send-error (res status message)
                     (setf (@ res status-code) status)
                     (setf (@ res "content-type") "text/plain")
                     (res.end message))
                   
                   (defun handle-root (req res)
                     (setf *visitor-count* (+ *visitor-count* 1))
                     (let ((html (substitute-template *home-template* 
                                                    "{{VISITOR_COUNT}}" 
                                                    (+ "" *visitor-count*))))
                       (send-html res html)))
                   
                   (defun handle-user (req res username)
                     (let ((html (substitute-template *user-template* 
                                                    "{{USERNAME}}" 
                                                    username)))
                       (send-html res html)))
                   
                   (defun handle-post (req res post-id)
                     (let ((html (substitute-template *post-template* 
                                                    "{{POST_ID}}" 
                                                    post-id)))
                       (send-html res html)))
                   
                   (defun handle-api-stats (req res)
                     (let ((json-response (+ "{\"visitor-count\":" *visitor-count* 
                                             ",\"uptime\":" (funcall (@ process uptime))
                                             ",\"server\":\"Parenscript Dynamic Server\"}")))
                       (send-json res json-response)))
                   
                   (defun handle-request (req res)
                     (let ((pathname (@ (funcall (@ *url* parse) (@ req url) true) "pathname")))
                       (cond
                         ((= pathname "/")
                          (handle-root req res))
                         
                         ((and (> (@ pathname length) 6) (= (funcall (@ pathname substring) 0 6) "/user/"))
                          (let ((username (funcall (@ pathname substring) 6)))
                            (handle-user req res username)))
                         
                         ((and (> (@ pathname length) 6) (= (funcall (@ pathname substring) 0 6) "/post/"))
                          (let ((post-id (funcall (@ pathname substring) 6)))
                            (handle-post req res post-id)))
                         
                         ((= pathname "/api/stats")
                          (handle-api-stats req res))
                         
                         (t
                          (send-error res 404 "Not Found")))))
                   
                   (defun start-server ()
                     (let ((server (funcall (@ *http* create-server) handle-request)))
                       (server.listen *port* (lambda ()
                                               (console.log (+ "ðŸš€ Dynamic Server running on port " *port*))
                                               (console.log (+ "Try: http://localhost:" *port* "/user/alice"))
                                               (console.log (+ "Try: http://localhost:" *port* "/post/123"))))
                       server))
                   
                   (start-server)))))
    (with-open-file (stream "server.js" :direction :output :if-exists :supersede)
      (write-string js-code stream))
    (format t "Generated server.js successfully!~%"))))

;; Main build function
(defun build-all ()
  "Build the main server"
  (generate-server)
  (format t "~%Server built successfully!~%"))
