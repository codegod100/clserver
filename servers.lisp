(in-package #:clserver)

;; Main Parenscript web server with routing
(defun generate-server ()
  (let ((js-code (ps
                   (defvar *http* (require "http"))
                   (defvar *url* (require "url"))
                   (defvar *port* 3000)
                   (defvar *visitor-count* 0)
                   
                   (defun send-html (res html)
                     (setf (@ res status-code) 200)
                     (setf (@ res "content-type") "text/html")
                     (res.end html))
                   
                   (defun send-json (res json-string)
                     (setf (@ res status-code) 200)
                     (setf (@ res "content-type") "application/json")
                     (res.end json-string))
                   
                   (defun substitute-template (template placeholder value)
                     (funcall (@ template replace) placeholder value))
                   
                   
                   (defun send-error (res status message)
                     (setf (@ res status-code) status)
                     (setf (@ res "content-type") "text/plain")
                     (res.end message))
                   
                   (defun handle-root (req res)
                     (setf *visitor-count* (+ *visitor-count* 1))
                     (let ((html (+ "<!DOCTYPE html>"
                                    "<html><head><meta charset=\"utf-8\"><title>Dynamic Server</title>"
                                    "<style>body{font-family:Arial,sans-serif;margin:40px;background:#f0f8ff;}"
                                    ".container{max-width:800px;margin:0 auto;background:white;padding:30px;border-radius:15px;box-shadow:0 4px 15px rgba(0,0,0,0.1);}"
                                    ".route{background:#e8f4fd;padding:15px;margin:10px 0;border-radius:8px;border-left:5px solid #3498db;}"
                                    "a{color:#3498db;text-decoration:none;font-weight:bold;}"
                                    "a:hover{text-decoration:underline;}"
                                    "</style></head><body>"
                                    "<div class='container'>"
                                    "<h1>üöÄ Dynamic Parenscript Server with Djula Templates</h1>"
                                    "<p>Visitor count: " *visitor-count* "</p>"
                                    "<h2>Dynamic Routes:</h2>"
                                    "<div class='route'><a href='/user/alice'>üë§ /user/alice</a> - User profile</div>"
                                    "<div class='route'><a href='/user/bob'>üë§ /user/bob</a> - Another user</div>"
                                    "<div class='route'><a href='/post/123'>üìù /post/123</a> - Blog post</div>"
                                    "<div class='route'><a href='/post/456'>üìù /post/456</a> - Another post</div>"
                                    "<div class='route'><a href='/api/stats'>üìä /api/stats</a> - Server statistics</div>"
                                    "</div></body></html>")))
                       (send-html res html)))
                   
                   (defun handle-user (req res username)
                     (let ((html (+ "<!DOCTYPE html>"
                                    "<html><head><meta charset=\"utf-8\"><title>User: " username "</title>"
                                    "<style>body{font-family:Arial,sans-serif;margin:40px;background:#f0f8ff;}"
                                    ".container{max-width:600px;margin:0 auto;background:white;padding:30px;border-radius:15px;box-shadow:0 4px 15px rgba(0,0,0,0.1);}"
                                    ".avatar{width:80px;height:80px;border-radius:50%;background:#3498db;color:white;display:flex;align-items:center;justify-content:center;font-size:32px;margin:0 auto 20px;}"
                                    "a{color:#3498db;text-decoration:none;font-weight:bold;}"
                                    "</style></head><body>"
                                    "<div class='container'>"
                                    "<div class='avatar'>" (aref username 0) "</div>"
                                    "<h1>üë§ User Profile: " username "</h1>"
                                    "<p>Welcome, " username "!</p>"
                                    "<p>This is a dynamic route generated by Parenscript with Djula templating.</p>"
                                    "<a href='/'>‚Üê Back to Home</a>"
                                    "</div></body></html>")))
                       (send-html res html)))
                   
                   (defun handle-post (req res post-id)
                     (let ((html (+ "<!DOCTYPE html>"
                                    "<html><head><meta charset=\"utf-8\"><title>Post #" post-id "</title>"
                                    "<style>body{font-family:Arial,sans-serif;margin:40px;background:#f0f8ff;}"
                                    ".container{max-width:800px;margin:0 auto;background:white;padding:30px;border-radius:15px;box-shadow:0 4px 15px rgba(0,0,0,0.1);}"
                                    "a{color:#3498db;text-decoration:none;font-weight:bold;}"
                                    "</style></head><body>"
                                    "<div class='container'>"
                                    "<h1>üìù Blog Post #" post-id "</h1>"
                                    "<p>This is post number " post-id ".</p>"
                                    "<p>Generated dynamically by Parenscript with Djula templating!</p>"
                                    "<h3>Technical Details:</h3>"
                                    "<ul><li>Route: <code>/post/" post-id "</code></li>"
                                    "<li>Generated by: Parenscript from Common Lisp</li>"
                                    "<li>Templating: Djula (prepared)</li>"
                                    "<li>Server: Node.js</li></ul>"
                                    "<a href='/'>‚Üê Back to Home</a>"
                                    "</div></body></html>")))
                       (send-html res html)))
                   
                   (defun handle-api-stats (req res)
                     (let ((json-response (+ "{\"visitor-count\":" *visitor-count* 
                                             ",\"uptime\":" (funcall (@ process uptime))
                                             ",\"server\":\"Parenscript Dynamic Server\"}")))
                       (send-json res json-response)))
                   
                   (defun handle-request (req res)
                     (let ((pathname (@ (funcall (@ *url* parse) (@ req url) true) "pathname")))
                       (cond
                         ((= pathname "/")
                          (handle-root req res))
                         
                         ((and (> (@ pathname length) 6) (= (funcall (@ pathname substring) 0 6) "/user/"))
                          (let ((username (funcall (@ pathname substring) 6)))
                            (handle-user req res username)))
                         
                         ((and (> (@ pathname length) 6) (= (funcall (@ pathname substring) 0 6) "/post/"))
                          (let ((post-id (funcall (@ pathname substring) 6)))
                            (handle-post req res post-id)))
                         
                         ((= pathname "/api/stats")
                          (handle-api-stats req res))
                         
                         (t
                          (send-error res 404 "Not Found")))))
                   
                   (defun start-server ()
                     (let ((server (funcall (@ *http* create-server) handle-request)))
                       (server.listen *port* (lambda ()
                                               (console.log (+ "üöÄ Dynamic Server running on port " *port*))
                                               (console.log (+ "Try: http://localhost:" *port* "/user/alice"))
                                               (console.log (+ "Try: http://localhost:" *port* "/post/123"))))
                       server))
                   
                   (start-server))))
    (with-open-file (stream "server.js" :direction :output :if-exists :supersede)
      (write-string js-code stream))
    (format t "Generated server.js successfully!~%")))

;; Main build function
(defun build-all ()
  "Build the main server"
  (generate-server)
  (format t "~%Server built successfully!~%"))
